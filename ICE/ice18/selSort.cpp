#include <iostream>
#define LENGTH 12
using namespace std;


void swap(int &x, int &y){
  int tmp = x;
  x = y;
  y = tmp;
}
void printArray(int array[LENGTH]){
  for(int i =0; i<LENGTH; i++){
      cout << array[i] << " ";
  }
  cout << endl;
}

void selectionSort(int array[LENGTH], int length){
  int count = 0;
  int min;
  for(int i=0; i < length; i++){
    //count++;
    min = i;
    //if(count%10 == 0){
      printArray(array);
    //}
    for(int j=i; j< length; j++){
      if(array[j] < array[min]){
        min = j;
      }
    }
    swap(array[min], array[i]);
  }
}

void fillRandom(int array[LENGTH]){
  for(int i=0; i<100; i++){
    array[i] = rand() % 1000;
  }
}

int main(){
  srand(20);
  //int dataRand[LENGTH];
  //fillRandom(dataRand);
  //int data[LENGTH] = {3, 9, 10, 2, 18, 29, 1, 9, 11, 20};
  //printArray(data);
  int data1[LENGTH];
  for(int i=0; i<LENGTH; i++){
    data1[i] = i+1;
  }
  int data2[LENGTH];
  for(int i=LENGTH; i>0; i--){
    data2[LENGTH-i] = i;
  }
  selectionSort(data1, LENGTH);
  printArray(data1);
  cout << endl;
  selectionSort(data2, LENGTH);
  printArray(data2);

}



/* OUTPUT
10 input
4c-32-75-9c-9c-29:ice18 dylan$ ./a.out
3 9 10 2 18 29 1 9 11 20
1 9 10 2 18 29 3 9 11 20
1 2 10 9 18 29 3 9 11 20
1 2 3 9 18 29 10 9 11 20
1 2 3 9 18 29 10 9 11 20
1 2 3 9 9 29 10 18 11 20
1 2 3 9 9 10 29 18 11 20
1 2 3 9 9 10 11 18 29 20
1 2 3 9 9 10 11 18 29 20
1 2 3 9 9 10 11 18 20 29
1 2 3 9 9 10 11 18 20 29

100 input
5 13 15 22 42 49 63 73 91 534 271 830 488 840 93 590 129 580 271 593 884 969
880 494 848 190 333 149 144 642 294 815 140 340 142 778 816 275 287 891 752 147
802 755 289 253 796 821 645 964 315 237 572 645 831 859 657 921 954 413 794 850
510 598 727 237 305 513 914 686 490 852 465 614 830 457 614 149 795 675 948 586
580 609 341 136 130 337 727 961 172 578 571 170 923 968 144 388 525 704
5 13 15 22 42 49 63 73 91 93 129 130 136 140 142 144 144 147 149 593 884 969 880
494 848 190 333 271 590 642 294 815 840 340 534 778 816 275 287 891 752 580 802
755 289 253 796 821 645 964 315 237 572 645 831 859 657 921 954 413 794 850 510
598 727 237 305 513 914 686 490 852 465 614 830 457 614 149 795 675 948 586 580
609 341 488 830 337 727 961 172 578 571 170 923 968 271 388 525 704
5 13 15 22 42 49 63 73 91 93 129 130 136 140 142 144 144 147 149 149 170 172 190
237 237 253 271 271 275 642 294 815 840 340 534 778 816 590 287 891 752 580 802
755 289 880 796 821 645 964 315 494 572 645 831 859 657 921 954 413 794 850 510
598 727 848 305 513 914 686 490 852 465 614 830 457 614 593 795 675 948 586 580
609 341 488 830 337 727 961 969 578 571 884 923 968 333 388 525 704
5 13 15 22 42 49 63 73 91 93 129 130 136 140 142 144 144 147 149 149 170 172 190
237 237 253 271 271 275 287 289 294 305 315 333 337 340 341 388 891 752 580 802
755 815 880 796 821 645 964 816 494 572 645 831 859 657 921 954 413 794 850 510
598 727 848 840 513 914 686 490 852 465 614 830 457 614 593 795 675 948 586 580
609 590 488 830 778 727 961 969 578 571 884 923 968 534 642 525 704
5 13 15 22 42 49 63 73 91 93 129 130 136 140 142 144 144 147 149 149 170 172 190
237 237 253 271 271 275 287 289 294 305 315 333 337 340 341 388 413 457 465 488
490 494 510 513 525 534 964 816 815 572 645 831 859 657 921 954 891 794 850 880
598 727 848 840 796 914 686 755 852 580 614 830 752 614 593 795 675 948 586 580
609 590 802 830 778 727 961 969 578 571 884 923 968 645 642 821 704
5 13 15 22 42 49 63 73 91 93 129 130 136 140 142 144 144 147 149 149 170 172 190
237 237 253 271 271 275 287 289 294 305 315 333 337 340 341 388 413 457 465 488
490 494 510 513 525 534 571 572 578 580 580 586 590 593 598 609 891 794 850 880
921 727 848 840 796 914 686 755 852 816 614 830 752 614 657 795 675 948 831 645
954 859 802 830 778 727 961 969 815 964 884 923 968 645 642 821 704
5 13 15 22 42 49 63 73 91 93 129 130 136 140 142 144 144 147 149 149 170 172 190
237 237 253 271 271 275 287 289 294 305 315 333 337 340 341 388 413 457 465 488
490 494 510 513 525 534 571 572 578 580 580 586 590 593 598 609 614 614 642 645
645 657 675 686 704 727 840 755 852 816 891 830 752 794 914 795 848 948 831 880
954 859 802 830 778 727 961 969 815 964 884 923 968 921 850 821 796
5 13 15 22 42 49 63 73 91 93 129 130 136 140 142 144 144 147 149 149 170 172 190
237 237 253 271 271 275 287 289 294 305 315 333 337 340 341 388 413 457 465 488
490 494 510 513 525 534 571 572 578 580 580 586 590 593 598 609 614 614 642 645
645 657 675 686 704 727 727 752 755 778 794 795 796 802 815 816 848 948 831 880
954 859 891 830 830 840 961 969 914 964 884 923 968 921 850 821 852
5 13 15 22 42 49 63 73 91 93 129 130 136 140 142 144 144 147 149 149 170 172 190
237 237 253 271 271 275 287 289 294 305 315 333 337 340 341 388 413 457 465 488
490 494 510 513 525 534 571 572 578 580 580 586 590 593 598 609 614 614 642 645
645 657 675 686 704 727 727 752 755 778 794 795 796 802 815 816 821 830 830 831
840 848 850 852 859 880 961 969 914 964 884 923 968 921 891 954 948
5 13 15 22 42 49 63 73 91 93 129 130 136 140 142 144 144 147 149 149 170 172 190
237 237 253 271 271 275 287 289 294 305 315 333 337 340 341 388 413 457 465 488
490 494 510 513 525 534 571 572 578 580 580 586 590 593 598 609 614 614 642 645
645 657 675 686 704 727 727 752 755 778 794 795 796 802 815 816 821 830 830 831
840 848 850 852 859 880 884 891 914 921 923 948 954 961 964 968 969
5 13 15 22 42 49 63 73 91 93 129 130 136 140 142 144 144 147 149 149 170 172 190
237 237 253 271 271 275 287 289 294 305 315 333 337 340 341 388 413 457 465 488
490 494 510 513 525 534 571 572 578 580 580 586 590 593 598 609 614 614 642 645
645 657 675 686 704 727 727 752 755 778 794 795 796 802 815 816 821 830 830 831
840 848 850 852 859 880 884 891 914 921 923 948 954 961 964 968 969

12 input
4c-32-75-9c-9c-29:ice18 dylan$ ./a.out
1 2 3 4 5 6 7 8 9 10 11 12
1 2 3 4 5 6 7 8 9 10 11 12
1 2 3 4 5 6 7 8 9 10 11 12
1 2 3 4 5 6 7 8 9 10 11 12
1 2 3 4 5 6 7 8 9 10 11 12
1 2 3 4 5 6 7 8 9 10 11 12
1 2 3 4 5 6 7 8 9 10 11 12
1 2 3 4 5 6 7 8 9 10 11 12
1 2 3 4 5 6 7 8 9 10 11 12
1 2 3 4 5 6 7 8 9 10 11 12
1 2 3 4 5 6 7 8 9 10 11 12
1 2 3 4 5 6 7 8 9 10 11 12
1 2 3 4 5 6 7 8 9 10 11 12

12 11 10 9 8 7 6 5 4 3 2 1
1 11 10 9 8 7 6 5 4 3 2 12
1 2 10 9 8 7 6 5 4 3 11 12
1 2 3 9 8 7 6 5 4 10 11 12
1 2 3 4 8 7 6 5 9 10 11 12
1 2 3 4 5 7 6 8 9 10 11 12
1 2 3 4 5 6 7 8 9 10 11 12
1 2 3 4 5 6 7 8 9 10 11 12
1 2 3 4 5 6 7 8 9 10 11 12
1 2 3 4 5 6 7 8 9 10 11 12
1 2 3 4 5 6 7 8 9 10 11 12
1 2 3 4 5 6 7 8 9 10 11 12
1 2 3 4 5 6 7 8 9 10 11 12
*/
